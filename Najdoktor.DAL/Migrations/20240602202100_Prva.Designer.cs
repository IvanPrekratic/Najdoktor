// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Najdoktor.DAL;

#nullable disable

namespace Najdoktor.DAL.Migrations
{
    [DbContext(typeof(DataManagerDbContext))]
    [Migration("20240602202100_Prva")]
    partial class Prva
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Najdoktor.Model.Bolnica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.ToTable("Bolnice");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Adresa = "Kišpatićeva 12",
                            GradID = 1,
                            Naziv = "KBC Zagreb"
                        },
                        new
                        {
                            ID = 2,
                            Adresa = "Krešimirova 42",
                            GradID = 4,
                            Naziv = "KBC Rijeka"
                        },
                        new
                        {
                            ID = 3,
                            Adresa = "Firule 12",
                            GradID = 5,
                            Naziv = "KBC Split"
                        },
                        new
                        {
                            ID = 4,
                            Adresa = "Josipa Huttlera 4",
                            GradID = 6,
                            Naziv = "KBC Osijek"
                        },
                        new
                        {
                            ID = 5,
                            Adresa = "Bože Peričića 5",
                            GradID = 7,
                            Naziv = "OB Zadar"
                        },
                        new
                        {
                            ID = 6,
                            Adresa = "Dr. Roka Mišetića 2",
                            GradID = 8,
                            Naziv = "OB Dubrovnik"
                        },
                        new
                        {
                            ID = 7,
                            Adresa = "Santoriova 24",
                            GradID = 9,
                            Naziv = "OB Pula"
                        },
                        new
                        {
                            ID = 8,
                            Adresa = "Ivana Meštrovića 1",
                            GradID = 10,
                            Naziv = "OB Varaždin"
                        },
                        new
                        {
                            ID = 9,
                            Adresa = "Ivana Gorana Kovačića 1E",
                            GradID = 11,
                            Naziv = "ŽB Čakovec"
                        },
                        new
                        {
                            ID = 10,
                            Adresa = "Andrije Štampara 3",
                            GradID = 3,
                            Naziv = "OB Karlovac"
                        });
                });

            modelBuilder.Entity("Najdoktor.Model.Doktor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BolnicaID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecijalizacijaID")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BolnicaID");

                    b.HasIndex("SpecijalizacijaID");

                    b.ToTable("Doktori");
                });

            modelBuilder.Entity("Najdoktor.Model.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Zagreb"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Velika Gorica"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Karlovac"
                        },
                        new
                        {
                            ID = 4,
                            Naziv = "Rijeka"
                        },
                        new
                        {
                            ID = 5,
                            Naziv = "Split"
                        },
                        new
                        {
                            ID = 6,
                            Naziv = "Osijek"
                        },
                        new
                        {
                            ID = 7,
                            Naziv = "Zadar"
                        },
                        new
                        {
                            ID = 8,
                            Naziv = "Dubrovnik"
                        },
                        new
                        {
                            ID = 9,
                            Naziv = "Pula"
                        },
                        new
                        {
                            ID = 10,
                            Naziv = "Varaždin"
                        },
                        new
                        {
                            ID = 11,
                            Naziv = "Čakovec"
                        },
                        new
                        {
                            ID = 12,
                            Naziv = "Koprivnica"
                        },
                        new
                        {
                            ID = 13,
                            Naziv = "Sisak"
                        },
                        new
                        {
                            ID = 14,
                            Naziv = "Vrbovsko"
                        });
                });

            modelBuilder.Entity("Najdoktor.Model.Pacijent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("Najdoktor.Model.Recenzija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DoktorID")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("PacijentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoktorID");

                    b.HasIndex("PacijentID");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Najdoktor.Model.Specijalizacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("NazivSpecijalizacije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Specijalizacije");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NazivSpecijalizacije = "Opća medicina"
                        },
                        new
                        {
                            ID = 2,
                            NazivSpecijalizacije = "Dermatologija"
                        },
                        new
                        {
                            ID = 3,
                            NazivSpecijalizacije = "Oftalmologija"
                        },
                        new
                        {
                            ID = 4,
                            NazivSpecijalizacije = "Ortopedija"
                        },
                        new
                        {
                            ID = 5,
                            NazivSpecijalizacije = "Ginekologija"
                        },
                        new
                        {
                            ID = 6,
                            NazivSpecijalizacije = "Pedijatrija"
                        },
                        new
                        {
                            ID = 7,
                            NazivSpecijalizacije = "Kardiologija"
                        },
                        new
                        {
                            ID = 8,
                            NazivSpecijalizacije = "Neurologija"
                        },
                        new
                        {
                            ID = 9,
                            NazivSpecijalizacije = "Psihijatrija"
                        },
                        new
                        {
                            ID = 10,
                            NazivSpecijalizacije = "Radiologija"
                        });
                });

            modelBuilder.Entity("Najdoktor.Model.Bolnica", b =>
                {
                    b.HasOne("Najdoktor.Model.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("Najdoktor.Model.Doktor", b =>
                {
                    b.HasOne("Najdoktor.Model.Bolnica", "Bolnica")
                        .WithMany()
                        .HasForeignKey("BolnicaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Najdoktor.Model.Specijalizacija", "Specijalizacija")
                        .WithMany()
                        .HasForeignKey("SpecijalizacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bolnica");

                    b.Navigation("Specijalizacija");
                });

            modelBuilder.Entity("Najdoktor.Model.Pacijent", b =>
                {
                    b.HasOne("Najdoktor.Model.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("Najdoktor.Model.Recenzija", b =>
                {
                    b.HasOne("Najdoktor.Model.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Najdoktor.Model.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });
#pragma warning restore 612, 618
        }
    }
}
